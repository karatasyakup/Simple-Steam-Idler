"use strict";

exports.__esModule = true;
exports.isEOL = exports.isStringNode = exports.isTagNode = exports.getUniqAttr = exports.getNodeLength = exports.escapeHTML = exports.appendToNode = exports.attrValue = exports.attrsToString = void 0;

var _char = require("./char");

var isTagNode = el => typeof el === 'object' && !!el.tag;

exports.isTagNode = isTagNode;

var isStringNode = el => typeof el === 'string';

exports.isStringNode = isStringNode;

var isEOL = el => el === _char.N;

exports.isEOL = isEOL;

var keysReduce = (obj, reduce, def) => Object.keys(obj).reduce(reduce, def);

var getNodeLength = node => {
  if (isTagNode(node)) {
    return node.content.reduce((count, contentNode) => count + getNodeLength(contentNode), 0);
  }

  if (isStringNode(node)) {
    return node.length;
  }

  return 0;
};
/**
 * Appends value to Tag Node
 * @param {TagNode} node
 * @param value
 */


exports.getNodeLength = getNodeLength;

var appendToNode = (node, value) => {
  node.content.push(value);
};
/**
 * Replaces " to &qquot;
 * @param {String} value
 */


exports.appendToNode = appendToNode;

var escapeHTML = value => value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;') // eslint-disable-next-line no-script-url
.replace(/(javascript):/gi, '$1%3A');
/**
 * Acept name and value and return valid html5 attribute string
 * @param {String} name
 * @param {String} value
 * @return {string}
 */


exports.escapeHTML = escapeHTML;

var attrValue = (name, value) => {
  var type = typeof value;
  var types = {
    boolean: () => value ? "" + name : '',
    number: () => name + "=\"" + value + "\"",
    string: () => name + "=\"" + escapeHTML(value) + "\"",
    object: () => name + "=\"" + escapeHTML(JSON.stringify(value)) + "\""
  };
  return types[type] ? types[type]() : '';
};
/**
 * Transforms attrs to html params string
 * @param values
 */


exports.attrValue = attrValue;

var attrsToString = values => {
  // To avoid some malformed attributes
  if (values == null) {
    return '';
  }

  return keysReduce(values, (arr, key) => [...arr, attrValue(key, values[key])], ['']).join(' ');
};
/**
 * Gets value from
 * @example
 * getUniqAttr({ 'foo': true, 'bar': bar' }) => 'bar'
 * @param attrs
 * @returns {string}
 */


exports.attrsToString = attrsToString;

var getUniqAttr = attrs => keysReduce(attrs, (res, key) => attrs[key] === key ? attrs[key] : null, null);

exports.getUniqAttr = getUniqAttr;