(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.BbobPluginHelper = {}));
}(this, (function (exports) { 'use strict';

  var N = '\n';

  var isTagNode = function isTagNode(el) {
    return typeof el === 'object' && !!el.tag;
  };

  var isStringNode = function isStringNode(el) {
    return typeof el === 'string';
  };

  var isEOL = function isEOL(el) {
    return el === N;
  };

  var keysReduce = function keysReduce(obj, reduce, def) {
    return Object.keys(obj).reduce(reduce, def);
  };

  var getNodeLength = function getNodeLength(node) {
    if (isTagNode(node)) {
      return node.content.reduce(function (count, contentNode) {
        return count + getNodeLength(contentNode);
      }, 0);
    }

    if (isStringNode(node)) {
      return node.length;
    }

    return 0;
  };
  /**
   * Appends value to Tag Node
   * @param {TagNode} node
   * @param value
   */


  var appendToNode = function appendToNode(node, value) {
    node.content.push(value);
  };
  /**
   * Replaces " to &qquot;
   * @param {String} value
   */


  var escapeHTML = function escapeHTML(value) {
    return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;') // eslint-disable-next-line no-script-url
    .replace(/(javascript):/gi, '$1%3A');
  };
  /**
   * Acept name and value and return valid html5 attribute string
   * @param {String} name
   * @param {String} value
   * @return {string}
   */


  var attrValue = function attrValue(name, value) {
    var type = typeof value;
    var types = {
      boolean: function boolean() {
        return value ? "" + name : '';
      },
      number: function number() {
        return name + "=\"" + value + "\"";
      },
      string: function string() {
        return name + "=\"" + escapeHTML(value) + "\"";
      },
      object: function object() {
        return name + "=\"" + escapeHTML(JSON.stringify(value)) + "\"";
      }
    };
    return types[type] ? types[type]() : '';
  };
  /**
   * Transforms attrs to html params string
   * @param values
   */


  var attrsToString = function attrsToString(values) {
    // To avoid some malformed attributes
    if (values == null) {
      return '';
    }

    return keysReduce(values, function (arr, key) {
      return [].concat(arr, [attrValue(key, values[key])]);
    }, ['']).join(' ');
  };
  /**
   * Gets value from
   * @example
   * getUniqAttr({ 'foo': true, 'bar': bar' }) => 'bar'
   * @param attrs
   * @returns {string}
   */


  var getUniqAttr = function getUniqAttr(attrs) {
    return keysReduce(attrs, function (res, key) {
      return attrs[key] === key ? attrs[key] : null;
    }, null);
  };

  exports.appendToNode = appendToNode;
  exports.attrValue = attrValue;
  exports.attrsToString = attrsToString;
  exports.escapeHTML = escapeHTML;
  exports.getNodeLength = getNodeLength;
  exports.getUniqAttr = getUniqAttr;
  exports.isEOL = isEOL;
  exports.isStringNode = isStringNode;
  exports.isTagNode = isTagNode;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
